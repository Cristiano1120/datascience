{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPGFLyNfJPAdQIQ1Txjq0l4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Este MVP tem como objetivo, realizar uma análise exploratória de um dataset contendo informações referentes a veículos a venda na Índia, no seguimento de venda de usados. Objetivo central é compreender como se comporta o volume de carros vendidos e não vendidos em relação a marca ou montadora dos veículos, e também, identificar tendências e padrões possíveis de ocorrência, determinando qual marca de carros tem o maior marketing share no mercado nesta região em análise.         Neste sentido, está análise irá fornecer insiths para possíveis interessados no mercado de usados na Índia. O estudo consiste em um problema de aprendizado supervisionado porque, a coluna “sold”  é a variável alvo e a coluna “name” refere-se aos atributos de entrada.\n",
        "Outrossim, as hipóteses ou premissas referentes ao problema, dão conta de que as informações do dataset são acuradas e relevantes para a amostra da população de veículos usados a venda na Índia, e caberá a análise exploratória identificar as tendências e padrões relevantes ao mercado de veículos usados, tanto para vendedores quanto aos compradores de veículos deste seguimento.\n",
        "Definição de cada um dos atributos presentes no dataset:\n",
        "•\tSales_ID: um número inteiro que representa o ID de venda do veículo;\n",
        "•\tName: o nome do modelo do veículo;\n",
        "•\tYear: o ano de fabricação do veículo;\n",
        "•\tSelling_price: o preço de venda do veículo em rúpias indianas (INR);\n",
        "•\tKm_driven: a quilometragem percorrida pelo veículo em quilômetros (km);\n",
        "•\tRegion: a região geográfica em que o veículo está sendo vendido;\n",
        "•\tState or Province: o estado ou província em que o veículo está sendo vendido;\n",
        "•\tCity: a cidade em que o veículo está sendo vendido;\n",
        "•\tFuel: o tipo de combustível usado pelo veículo (gasolina, diesel, etc.);\n",
        "•\tSeller_type: o tipo de vendedor (concessionária, proprietário particular, etc.);\n",
        "•\tTransmission: o tipo de transmissão do veículo (manual, automático, etc.);\n",
        "•\tOwner: o número de proprietários anteriores do veículo;\n",
        "•\tMileage: a quilometragem média do veículo em km/l (quilômetros por litro);\n",
        "•\tEngine: a capacidade do motor do veículo em cc (centímetros cúbicos);\n",
        "•\tMax_power: a potência máxima do motor do veículo em bhp (cavalos-vapor);\n",
        "•\tTorque: o torque máximo do motor do veículo em Nm (newton-metros);\n",
        "•\tSeats: o número de assentos no veículo;\n",
        "•\tSold: um indicador booleano que indica se o veículo foi vendido ou não.\n",
        "Características e dimensões:\n",
        "\tNúmero de atributos: 18\n",
        "\tNúmero de instâncias: 7906                                             \n",
        "\tO dataset é um dataFrame, \n",
        "\tOs tipos de dados são: object (10), int64 (6) e float64 (3);\n",
        "\tNesta primeira análise aparentemente não valores nulos;\n",
        "Análise de dados: \n",
        "Será utilizado o método de estatistica descritiva pois se utilizará de métodos estatisticos para descrever, organizar e resumir os dados do dataset, para que seja possivél análisa-los, descreve-los e iterpreta-los. \n",
        "Neste estudo após a exploração dos dados do dataset em sua versão original, optou-se em utilizar o método de Amostragem , ou seja, foi selecionado um subconjunto dos dados para serem analisados separadamente. Nesta perspectiva, foram selecionados apenas as colunas relevantes para a análise. \n",
        "São os atributos selecionados: “name” e “sold”, os quais foram renomeados para marca e venda respectivamente.\n",
        "Características e dimensões dos atributos selecionados:\n",
        "\tNúmero de atributos: 2\n",
        "\tNúmero de instâncias: 7906                                             \n",
        "\tO dataset é um dataFrame, \n",
        "\tOs tipos de dados são: object (2);\n",
        "\tNesta segunda análise aparentemente não valores nulos;\n",
        "Resumo estatísticos dos atributos numéricos:\n",
        "O resumo estatístico dos atributos categóricos “marca” e “venda” indica que o dataset possui 31 marcas distintas de veículos e duas possibilidades de valores para o atributo venda, que são \"N\" (indicando que o veículo não foi vendido) e \"Y\" (indicando que o veículo foi vendido).\n",
        " Além disso, a marca mais frequente nos dados é a \"Maruti\", presente em 2367 registros, e a maioria dos veículos no dataset não foram efetivamente vendidos, como indicado pela frequência de \"N\" para o atributo venda. \n",
        "O total de carros não vendidos são de 5906 unidades e a sua representatividade nesta amostra está em um patamar  de 75% e, para carros vendidos o total é de 2000 unidades com representatividade na amostra de 25%.\n",
        "Quanto as marcas mais vendidas observou-se que a as marcas Maruti (597unidades), Hyundai (332), Mahindra (201), Tata (178), Toyota (126) e Honda (124)..., respectivamente, são as marcas mais vendidas deste seguimento conforme os dados da amostra. E entre os veículos não vendidos respectivamente são: Maruti (1770), Hyundai (1028), Mahindra (557), Tata (541), Honda (342) e Toyota (326)..., nesta primeira análise verificados que os dois agrupamentos (vendidos e não vendidos) possuem uma similaridade no que tange ao posicionamento ou colocação nos dois grupos (‘N’ e ‘Y”),  no que refere-se  as marcas, ocorrendo apenas uma troca de posições a partir da quinta posição.\n",
        "\n",
        "Resultados alcançados:\n",
        "Conforme as analises, como trata-se de um mercado de usados, podemos dizer que a marca Maruti tem o maior marketing share no mercado de veículos da Índia, dentre as demais marcas ranqueadas entre veículos vendidos e não vendidos do mercado de veículos usados da Índia. Sugestão para as próximas analises deste dataset seriam: verificar como se comporta o mix de atributos mais presentes nos veículos vendidos e não vendidos e também, a correlação dos dados em relação a venda ou até de não venda de veículos. \n",
        "Este MVP tem como objetivo, realizar uma análise exploratória de um dataset contendo informações referentes a veículos a venda na Índia, no seguimento de venda de usados. Objetivo central é compreender como se comporta o volume de carros vendidos e não vendidos em relação a marca ou montadora dos veículos, e também, identificar tendências e padrões possíveis de ocorrência, determinando qual marca de carros tem o maior marketing share no mercado nesta região em análise.         Neste sentido, está análise irá fornecer insiths para possíveis interessados no mercado de usados na Índia. O estudo consiste em um problema de aprendizado supervisionado porque, a coluna “sold”  é a variável alvo e a coluna “name” refere-se aos atributos de entrada.\n",
        "Outrossim, as hipóteses ou premissas referentes ao problema, dão conta de que as informações do dataset são acuradas e relevantes para a amostra da população de veículos usados a venda na Índia, e caberá a análise exploratória identificar as tendências e padrões relevantes ao mercado de veículos usados, tanto para vendedores quanto aos compradores de veículos deste seguimento.\n",
        "Definição de cada um dos atributos presentes no dataset:\n",
        "•\tSales_ID: um número inteiro que representa o ID de venda do veículo;\n",
        "•\tName: o nome do modelo do veículo;\n",
        "•\tYear: o ano de fabricação do veículo;\n",
        "•\tSelling_price: o preço de venda do veículo em rúpias indianas (INR);\n",
        "•\tKm_driven: a quilometragem percorrida pelo veículo em quilômetros (km);\n",
        "•\tRegion: a região geográfica em que o veículo está sendo vendido;\n",
        "•\tState or Province: o estado ou província em que o veículo está sendo vendido;\n",
        "•\tCity: a cidade em que o veículo está sendo vendido;\n",
        "•\tFuel: o tipo de combustível usado pelo veículo (gasolina, diesel, etc.);\n",
        "•\tSeller_type: o tipo de vendedor (concessionária, proprietário particular, etc.);\n",
        "•\tTransmission: o tipo de transmissão do veículo (manual, automático, etc.);\n",
        "•\tOwner: o número de proprietários anteriores do veículo;\n",
        "•\tMileage: a quilometragem média do veículo em km/l (quilômetros por litro);\n",
        "•\tEngine: a capacidade do motor do veículo em cc (centímetros cúbicos);\n",
        "•\tMax_power: a potência máxima do motor do veículo em bhp (cavalos-vapor);\n",
        "•\tTorque: o torque máximo do motor do veículo em Nm (newton-metros);\n",
        "•\tSeats: o número de assentos no veículo;\n",
        "•\tSold: um indicador booleano que indica se o veículo foi vendido ou não.\n",
        "Características e dimensões:\n",
        "\tNúmero de atributos: 18\n",
        "\tNúmero de instâncias: 7906                                             \n",
        "\tO dataset é um dataFrame, \n",
        "\tOs tipos de dados são: object (10), int64 (6) e float64 (3);\n",
        "\tNesta primeira análise aparentemente não valores nulos;\n",
        "Análise de dados: \n",
        "Será utilizado o método de estatistica descritiva pois se utilizará de métodos estatisticos para descrever, organizar e resumir os dados do dataset, para que seja possivél análisa-los, descreve-los e iterpreta-los. \n",
        "Neste estudo após a exploração dos dados do dataset em sua versão original, optou-se em utilizar o método de Amostragem , ou seja, foi selecionado um subconjunto dos dados para serem analisados separadamente. Nesta perspectiva, foram selecionados apenas as colunas relevantes para a análise. \n",
        "São os atributos selecionados: “name” e “sold”, os quais foram renomeados para marca e venda respectivamente.\n",
        "Características e dimensões dos atributos selecionados:\n",
        "\tNúmero de atributos: 2\n",
        "\tNúmero de instâncias: 7906                                             \n",
        "\tO dataset é um dataFrame, \n",
        "\tOs tipos de dados são: object (2);\n",
        "\tNesta segunda análise aparentemente não valores nulos;\n",
        "Resumo estatísticos dos atributos numéricos:\n",
        "O resumo estatístico dos atributos categóricos “marca” e “venda” indica que o dataset possui 31 marcas distintas de veículos e duas possibilidades de valores para o atributo venda, que são \"N\" (indicando que o veículo não foi vendido) e \"Y\" (indicando que o veículo foi vendido).\n",
        " Além disso, a marca mais frequente nos dados é a \"Maruti\", presente em 2367 registros, e a maioria dos veículos no dataset não foram efetivamente vendidos, como indicado pela frequência de \"N\" para o atributo venda. \n",
        "O total de carros não vendidos são de 5906 unidades e a sua representatividade nesta amostra está em um patamar  de 75% e, para carros vendidos o total é de 2000 unidades com representatividade na amostra de 25%.\n",
        "Quanto as marcas mais vendidas observou-se que a as marcas Maruti (597unidades), Hyundai (332), Mahindra (201), Tata (178), Toyota (126) e Honda (124)..., respectivamente, são as marcas mais vendidas deste seguimento conforme os dados da amostra. E entre os veículos não vendidos respectivamente são: Maruti (1770), Hyundai (1028), Mahindra (557), Tata (541), Honda (342) e Toyota (326)..., nesta primeira análise verificados que os dois agrupamentos (vendidos e não vendidos) possuem uma similaridade no que tange ao posicionamento ou colocação nos dois grupos (‘N’ e ‘Y”),  no que refere-se  as marcas, ocorrendo apenas uma troca de posições a partir da quinta posição.\n",
        "\n",
        "Resultados alcançados:\n",
        "Conforme as analises, como trata-se de um mercado de usados, podemos dizer que a marca Maruti tem o maior marketing share no mercado de veículos da Índia, dentre as demais marcas ranqueadas entre veículos vendidos e não vendidos do mercado de veículos usados da Índia. Sugestão para as próximas analises deste dataset seriam: verificar como se comporta o mix de atributos mais presentes nos veículos vendidos e não vendidos e também, a correlação dos dados em relação a venda ou até de não venda de veículos. "
      ],
      "metadata": {
        "id": "YqnNvbX-AOr-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importando o pacote do Pandas para dar ínicio a analise exploratória de dados\n",
        "import pandas as pd\n",
        "\n",
        "# Informando a URL de importação do dataset a ser explorado\n",
        "url = \"https://raw.githubusercontent.com/Cristiano1120/datascience/main/UserCarData.csv\"\n",
        "\n",
        "# Ler o arquivo para exploração\n",
        "dataset = pd.read_csv(url, delimiter=',')"
      ],
      "metadata": {
        "id": "RwymYj0jRCEQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificar se o dataset é um dataframe\n",
        "type(dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dINRGgRXRJAA",
        "outputId": "e375e864-7293-402f-dbaf-807c3525d806"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibir as dimensões do dataset\n",
        "dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ooEI_McVRSwO",
        "outputId": "266fedb8-e4f6-42d0-9eae-e72eb74d5e5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7906, 18)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificando os tipos de cada coluna do dataframe\n",
        "dataset.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cS4jKsCVRuk_",
        "outputId": "37397e9b-4bc7-420a-a62a-a639d54bbcab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de atributos: 18\n",
            "Número de instâncias: 7906\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sales_ID               int64\n",
              "name                  object\n",
              "year                   int64\n",
              "selling_price          int64\n",
              "km_driven              int64\n",
              "Region                object\n",
              "State or Province     object\n",
              "City                  object\n",
              "fuel                  object\n",
              "seller_type           object\n",
              "transmission          object\n",
              "owner                 object\n",
              "mileage              float64\n",
              "engine                 int64\n",
              "max_power            float64\n",
              "torque                object\n",
              "seats                  int64\n",
              "sold                  object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificando se há valores nulos\n",
        "print(dataset.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ylXPHY7taMCg",
        "outputId": "9b80077c-4351-4383-dd4c-2f13864afddf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sales_ID             0\n",
            "name                 0\n",
            "year                 0\n",
            "selling_price        0\n",
            "km_driven            0\n",
            "Region               0\n",
            "State or Province    0\n",
            "City                 0\n",
            "fuel                 0\n",
            "seller_type          0\n",
            "transmission         0\n",
            "owner                0\n",
            "mileage              0\n",
            "engine               0\n",
            "max_power            0\n",
            "torque               0\n",
            "seats                0\n",
            "sold                 0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibindo as primeiras linhas do conjunto de dados\n",
        "dataset.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 722
        },
        "id": "thtwLiio121L",
        "outputId": "7b6ec4ec-38e7-4649-cbb6-769c9b27a578"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Sales_ID     name  year  selling_price  km_driven   Region  \\\n",
              "0         1   Maruti  2014         450000     145500     East   \n",
              "1         2    Skoda  2014         370000     120000     East   \n",
              "2         3    Honda  2006         158000     140000  Central   \n",
              "3         4  Hyundai  2010         225000     127000  Central   \n",
              "4         5   Maruti  2007         130000     120000     East   \n",
              "5         6  Hyundai  2017         440000      45000     East   \n",
              "6         7   Maruti  2007          96000     175000     West   \n",
              "7         8   Maruti  2001          45000       5000     West   \n",
              "8         9   Toyota  2011         350000      90000     West   \n",
              "9        10     Ford  2013         200000     169000  Central   \n",
              "\n",
              "      State or Province           City    fuel seller_type transmission  \\\n",
              "0  District of Columbia     Washington  Diesel  Individual       Manual   \n",
              "1              New York  New York City  Diesel  Individual       Manual   \n",
              "2              Illinois        Chicago  Petrol  Individual       Manual   \n",
              "3              Illinois        Chicago  Diesel  Individual       Manual   \n",
              "4              New York  New York City  Petrol  Individual       Manual   \n",
              "5              New York  New York City  Petrol  Individual       Manual   \n",
              "6            California    Los Angeles     LPG  Individual       Manual   \n",
              "7            California    Los Angeles  Petrol  Individual       Manual   \n",
              "8            California    Los Angeles  Diesel  Individual       Manual   \n",
              "9                 Texas        Houston  Diesel  Individual       Manual   \n",
              "\n",
              "          owner  mileage  engine  max_power                    torque  seats  \\\n",
              "0   First_Owner    23.40    1248      74.00            190Nm@ 2000rpm      5   \n",
              "1  Second_Owner    21.14    1498     103.52       250Nm@ 1500-2500rpm      5   \n",
              "2   Third_Owner    17.70    1497      78.00     12.7@ 2,700(kgm@ rpm)      5   \n",
              "3   First_Owner    23.00    1396      90.00  22.4 kgm at 1750-2750rpm      5   \n",
              "4   First_Owner    16.10    1298      88.20     11.5@ 4,500(kgm@ rpm)      5   \n",
              "5   First_Owner    20.14    1197      81.86         113.75nm@ 4000rpm      5   \n",
              "6   First_Owner    17.30    1061      57.50      7.8@ 4,500(kgm@ rpm)      5   \n",
              "7  Second_Owner    16.10     796      37.00             59Nm@ 2500rpm      4   \n",
              "8   First_Owner    23.59    1364      67.10       170Nm@ 1800-2400rpm      5   \n",
              "9   First_Owner    20.00    1399      68.10            160Nm@ 2000rpm      5   \n",
              "\n",
              "  sold  \n",
              "0    Y  \n",
              "1    Y  \n",
              "2    Y  \n",
              "3    Y  \n",
              "4    Y  \n",
              "5    Y  \n",
              "6    Y  \n",
              "7    Y  \n",
              "8    Y  \n",
              "9    Y  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e80c56e0-ab37-4eab-aece-d59387272b86\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales_ID</th>\n",
              "      <th>name</th>\n",
              "      <th>year</th>\n",
              "      <th>selling_price</th>\n",
              "      <th>km_driven</th>\n",
              "      <th>Region</th>\n",
              "      <th>State or Province</th>\n",
              "      <th>City</th>\n",
              "      <th>fuel</th>\n",
              "      <th>seller_type</th>\n",
              "      <th>transmission</th>\n",
              "      <th>owner</th>\n",
              "      <th>mileage</th>\n",
              "      <th>engine</th>\n",
              "      <th>max_power</th>\n",
              "      <th>torque</th>\n",
              "      <th>seats</th>\n",
              "      <th>sold</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2014</td>\n",
              "      <td>450000</td>\n",
              "      <td>145500</td>\n",
              "      <td>East</td>\n",
              "      <td>District of Columbia</td>\n",
              "      <td>Washington</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>23.40</td>\n",
              "      <td>1248</td>\n",
              "      <td>74.00</td>\n",
              "      <td>190Nm@ 2000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Skoda</td>\n",
              "      <td>2014</td>\n",
              "      <td>370000</td>\n",
              "      <td>120000</td>\n",
              "      <td>East</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York City</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second_Owner</td>\n",
              "      <td>21.14</td>\n",
              "      <td>1498</td>\n",
              "      <td>103.52</td>\n",
              "      <td>250Nm@ 1500-2500rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Honda</td>\n",
              "      <td>2006</td>\n",
              "      <td>158000</td>\n",
              "      <td>140000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Illinois</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Third_Owner</td>\n",
              "      <td>17.70</td>\n",
              "      <td>1497</td>\n",
              "      <td>78.00</td>\n",
              "      <td>12.7@ 2,700(kgm@ rpm)</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2010</td>\n",
              "      <td>225000</td>\n",
              "      <td>127000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Illinois</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>23.00</td>\n",
              "      <td>1396</td>\n",
              "      <td>90.00</td>\n",
              "      <td>22.4 kgm at 1750-2750rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2007</td>\n",
              "      <td>130000</td>\n",
              "      <td>120000</td>\n",
              "      <td>East</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York City</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>16.10</td>\n",
              "      <td>1298</td>\n",
              "      <td>88.20</td>\n",
              "      <td>11.5@ 4,500(kgm@ rpm)</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2017</td>\n",
              "      <td>440000</td>\n",
              "      <td>45000</td>\n",
              "      <td>East</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York City</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>20.14</td>\n",
              "      <td>1197</td>\n",
              "      <td>81.86</td>\n",
              "      <td>113.75nm@ 4000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2007</td>\n",
              "      <td>96000</td>\n",
              "      <td>175000</td>\n",
              "      <td>West</td>\n",
              "      <td>California</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>LPG</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>17.30</td>\n",
              "      <td>1061</td>\n",
              "      <td>57.50</td>\n",
              "      <td>7.8@ 4,500(kgm@ rpm)</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2001</td>\n",
              "      <td>45000</td>\n",
              "      <td>5000</td>\n",
              "      <td>West</td>\n",
              "      <td>California</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second_Owner</td>\n",
              "      <td>16.10</td>\n",
              "      <td>796</td>\n",
              "      <td>37.00</td>\n",
              "      <td>59Nm@ 2500rpm</td>\n",
              "      <td>4</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>Toyota</td>\n",
              "      <td>2011</td>\n",
              "      <td>350000</td>\n",
              "      <td>90000</td>\n",
              "      <td>West</td>\n",
              "      <td>California</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>23.59</td>\n",
              "      <td>1364</td>\n",
              "      <td>67.10</td>\n",
              "      <td>170Nm@ 1800-2400rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>Ford</td>\n",
              "      <td>2013</td>\n",
              "      <td>200000</td>\n",
              "      <td>169000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Texas</td>\n",
              "      <td>Houston</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>20.00</td>\n",
              "      <td>1399</td>\n",
              "      <td>68.10</td>\n",
              "      <td>160Nm@ 2000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e80c56e0-ab37-4eab-aece-d59387272b86')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e80c56e0-ab37-4eab-aece-d59387272b86 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e80c56e0-ab37-4eab-aece-d59387272b86');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibindo as úlitimas linhas do conjunto de dados\n",
        "dataset.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 687
        },
        "id": "V2GIcJFw2J5y",
        "outputId": "15455573-160d-4396-c11d-42df7075780e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Sales_ID     name  year  selling_price  km_driven   Region  \\\n",
              "7896      8119  Hyundai  2013         380000      25000    South   \n",
              "7897      8120   Maruti  2017         360000      80000    South   \n",
              "7898      8121  Hyundai  2008         120000     191000    South   \n",
              "7899      8122   Maruti  2013         260000      50000  Central   \n",
              "7900      8123  Hyundai  2014         475000      80000  Central   \n",
              "7901      8124  Hyundai  2013         320000     110000  Central   \n",
              "7902      8125  Hyundai  2007         135000     119000  Central   \n",
              "7903      8126   Maruti  2009         382000     120000  Central   \n",
              "7904      8127     Tata  2013         290000      25000     East   \n",
              "7905      8128     Tata  2013         290000      25000     East   \n",
              "\n",
              "     State or Province         City    fuel seller_type transmission  \\\n",
              "7896    North Carolina  Mooresville  Petrol  Individual       Manual   \n",
              "7897    North Carolina       Monroe  Petrol  Individual       Manual   \n",
              "7898    North Carolina  Mooresville  Petrol  Individual       Manual   \n",
              "7899             Texas        Plano  Petrol  Individual       Manual   \n",
              "7900             Texas        Plano  Diesel  Individual       Manual   \n",
              "7901             Texas        Plano  Petrol  Individual       Manual   \n",
              "7902             Texas  Port Arthur  Diesel  Individual       Manual   \n",
              "7903             Texas  Port Arthur  Diesel  Individual       Manual   \n",
              "7904     Massachusetts    Lunenburg  Diesel  Individual       Manual   \n",
              "7905             Maine      Augusta  Diesel  Individual       Manual   \n",
              "\n",
              "                   owner  mileage  engine  max_power  \\\n",
              "7896         First_Owner    18.50    1197      82.85   \n",
              "7897         First_Owner    20.51     998      67.04   \n",
              "7898         First_Owner    17.92    1086      62.10   \n",
              "7899        Second_Owner    18.90     998      67.10   \n",
              "7900        Second_Owner    22.54    1396      88.73   \n",
              "7901         First_Owner    18.50    1197      82.85   \n",
              "7902  Fourth_Above_Owner    16.80    1493     110.00   \n",
              "7903         First_Owner    19.30    1248      73.90   \n",
              "7904         First_Owner    23.57    1396      70.00   \n",
              "7905         First_Owner    23.57    1396      70.00   \n",
              "\n",
              "                         torque  seats sold  \n",
              "7896           113.7Nm@ 4000rpm      5    N  \n",
              "7897              90Nm@ 3500rpm      5    N  \n",
              "7898            96.1Nm@ 3000rpm      5    N  \n",
              "7899              90Nm@ 3500rpm      5    N  \n",
              "7900      219.7Nm@ 1500-2750rpm      5    N  \n",
              "7901           113.7Nm@ 4000rpm      5    N  \n",
              "7902  24@ 1,900-2,750(kgm@ rpm)      5    N  \n",
              "7903             190Nm@ 2000rpm      5    N  \n",
              "7904        140Nm@ 1800-3000rpm      5    N  \n",
              "7905        140Nm@ 1800-3000rpm      5    N  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-347d82d3-d874-475b-85d3-5f3996184b4d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales_ID</th>\n",
              "      <th>name</th>\n",
              "      <th>year</th>\n",
              "      <th>selling_price</th>\n",
              "      <th>km_driven</th>\n",
              "      <th>Region</th>\n",
              "      <th>State or Province</th>\n",
              "      <th>City</th>\n",
              "      <th>fuel</th>\n",
              "      <th>seller_type</th>\n",
              "      <th>transmission</th>\n",
              "      <th>owner</th>\n",
              "      <th>mileage</th>\n",
              "      <th>engine</th>\n",
              "      <th>max_power</th>\n",
              "      <th>torque</th>\n",
              "      <th>seats</th>\n",
              "      <th>sold</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7896</th>\n",
              "      <td>8119</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2013</td>\n",
              "      <td>380000</td>\n",
              "      <td>25000</td>\n",
              "      <td>South</td>\n",
              "      <td>North Carolina</td>\n",
              "      <td>Mooresville</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>18.50</td>\n",
              "      <td>1197</td>\n",
              "      <td>82.85</td>\n",
              "      <td>113.7Nm@ 4000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7897</th>\n",
              "      <td>8120</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2017</td>\n",
              "      <td>360000</td>\n",
              "      <td>80000</td>\n",
              "      <td>South</td>\n",
              "      <td>North Carolina</td>\n",
              "      <td>Monroe</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>20.51</td>\n",
              "      <td>998</td>\n",
              "      <td>67.04</td>\n",
              "      <td>90Nm@ 3500rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7898</th>\n",
              "      <td>8121</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2008</td>\n",
              "      <td>120000</td>\n",
              "      <td>191000</td>\n",
              "      <td>South</td>\n",
              "      <td>North Carolina</td>\n",
              "      <td>Mooresville</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>17.92</td>\n",
              "      <td>1086</td>\n",
              "      <td>62.10</td>\n",
              "      <td>96.1Nm@ 3000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7899</th>\n",
              "      <td>8122</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2013</td>\n",
              "      <td>260000</td>\n",
              "      <td>50000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Texas</td>\n",
              "      <td>Plano</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second_Owner</td>\n",
              "      <td>18.90</td>\n",
              "      <td>998</td>\n",
              "      <td>67.10</td>\n",
              "      <td>90Nm@ 3500rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7900</th>\n",
              "      <td>8123</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2014</td>\n",
              "      <td>475000</td>\n",
              "      <td>80000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Texas</td>\n",
              "      <td>Plano</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second_Owner</td>\n",
              "      <td>22.54</td>\n",
              "      <td>1396</td>\n",
              "      <td>88.73</td>\n",
              "      <td>219.7Nm@ 1500-2750rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7901</th>\n",
              "      <td>8124</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2013</td>\n",
              "      <td>320000</td>\n",
              "      <td>110000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Texas</td>\n",
              "      <td>Plano</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>18.50</td>\n",
              "      <td>1197</td>\n",
              "      <td>82.85</td>\n",
              "      <td>113.7Nm@ 4000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7902</th>\n",
              "      <td>8125</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>2007</td>\n",
              "      <td>135000</td>\n",
              "      <td>119000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Texas</td>\n",
              "      <td>Port Arthur</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Fourth_Above_Owner</td>\n",
              "      <td>16.80</td>\n",
              "      <td>1493</td>\n",
              "      <td>110.00</td>\n",
              "      <td>24@ 1,900-2,750(kgm@ rpm)</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7903</th>\n",
              "      <td>8126</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>2009</td>\n",
              "      <td>382000</td>\n",
              "      <td>120000</td>\n",
              "      <td>Central</td>\n",
              "      <td>Texas</td>\n",
              "      <td>Port Arthur</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>19.30</td>\n",
              "      <td>1248</td>\n",
              "      <td>73.90</td>\n",
              "      <td>190Nm@ 2000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7904</th>\n",
              "      <td>8127</td>\n",
              "      <td>Tata</td>\n",
              "      <td>2013</td>\n",
              "      <td>290000</td>\n",
              "      <td>25000</td>\n",
              "      <td>East</td>\n",
              "      <td>Massachusetts</td>\n",
              "      <td>Lunenburg</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>23.57</td>\n",
              "      <td>1396</td>\n",
              "      <td>70.00</td>\n",
              "      <td>140Nm@ 1800-3000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7905</th>\n",
              "      <td>8128</td>\n",
              "      <td>Tata</td>\n",
              "      <td>2013</td>\n",
              "      <td>290000</td>\n",
              "      <td>25000</td>\n",
              "      <td>East</td>\n",
              "      <td>Maine</td>\n",
              "      <td>Augusta</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Individual</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First_Owner</td>\n",
              "      <td>23.57</td>\n",
              "      <td>1396</td>\n",
              "      <td>70.00</td>\n",
              "      <td>140Nm@ 1800-3000rpm</td>\n",
              "      <td>5</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-347d82d3-d874-475b-85d3-5f3996184b4d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-347d82d3-d874-475b-85d3-5f3996184b4d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-347d82d3-d874-475b-85d3-5f3996184b4d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Resumo da análise exploratória:\n",
        "\n",
        "* Existem 18 atributos e 7906 instâncias no dataset;\n",
        "\n",
        "* O dataset é um dataFrame;\n",
        "\n",
        "* Os tipos de dados são: object (10), int64 (6) e float64 (3);\n",
        "\n",
        "* Nesta primeira análise aparentemente não valores nulos;\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "QqiViVstW_Xd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Após a analise exploratória, iniciarei a analise novamente focando nos atributos que considerei \n",
        "# os mais relevantes para o estudo.\n",
        "\n",
        "# Chamando novamente o dataset original\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "url_dados = \"https://raw.githubusercontent.com/Cristiano1120/datascience/main/UserCarData.csv\"\n",
        "\n",
        "dataset = pd.read_csv(url_dados)\n",
        "\n",
        "# Exibir informações estatisticas do dataset novamente utilizando os atributos que julgo serem os mais relevantes para a analise\n",
        "\n",
        "# Labels dos atributos do dataset\n",
        "relevantes_colunas = ['name', 'sold']\n",
        "atributos_relevantes = dataset.loc[:, relevantes_colunas]\n",
        "\n",
        "# Renomeando a coluna \"name\" para \"marca\"\n",
        "atributos_relevantes = atributos_relevantes.rename(columns={\"name\": \"marca\"})\n",
        "\n",
        "# Renomeando a coluna \"sold\" para \"vendas\"\n",
        "atributos_relevantes = atributos_relevantes.rename(columns={\"sold\": \"venda\"})\n"
      ],
      "metadata": {
        "id": "BoTZDIgkcQw0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificando a dimensão da nova matriz com somente os atributos relevantes\n",
        "print(atributos_relevantes.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DzorT8eidIU3",
        "outputId": "755cbb34-1e90-43c0-a7ef-e926655047ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(7906, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificando os tipos de cada coluna do dataframe\n",
        "atributos_relevantes.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g2j9b70ddn6e",
        "outputId": "5d5a00c2-7915-48b1-cea5-110e8dfb61b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "marca    object\n",
              "venda    object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibindo as primeiras linhas do conjunto de dados\n",
        "atributos_relevantes.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "PLmuY1QFzerS",
        "outputId": "618cb676-3f74-41be-81cf-238e3054aadb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     marca venda\n",
              "0   Maruti     Y\n",
              "1    Skoda     Y\n",
              "2    Honda     Y\n",
              "3  Hyundai     Y\n",
              "4   Maruti     Y\n",
              "5  Hyundai     Y\n",
              "6   Maruti     Y\n",
              "7   Maruti     Y\n",
              "8   Toyota     Y\n",
              "9     Ford     Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a256d72-514e-4701-9c9b-c5b17aeaeec8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>marca</th>\n",
              "      <th>venda</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Skoda</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Honda</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Toyota</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Ford</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a256d72-514e-4701-9c9b-c5b17aeaeec8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5a256d72-514e-4701-9c9b-c5b17aeaeec8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5a256d72-514e-4701-9c9b-c5b17aeaeec8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibindo as últimas linhas do conjunto de dados\n",
        "atributos_relevantes.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "faBhAJqz0q70",
        "outputId": "64e9d775-87f0-4b07-b268-40a16a079d01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        marca venda\n",
              "7896  Hyundai     N\n",
              "7897   Maruti     N\n",
              "7898  Hyundai     N\n",
              "7899   Maruti     N\n",
              "7900  Hyundai     N\n",
              "7901  Hyundai     N\n",
              "7902  Hyundai     N\n",
              "7903   Maruti     N\n",
              "7904     Tata     N\n",
              "7905     Tata     N"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf3c064e-a253-463b-911f-438f60ed95fd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>marca</th>\n",
              "      <th>venda</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7896</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7897</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7898</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7899</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7900</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7901</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7902</th>\n",
              "      <td>Hyundai</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7903</th>\n",
              "      <td>Maruti</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7904</th>\n",
              "      <td>Tata</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7905</th>\n",
              "      <td>Tata</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf3c064e-a253-463b-911f-438f60ed95fd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cf3c064e-a253-463b-911f-438f60ed95fd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cf3c064e-a253-463b-911f-438f60ed95fd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Valores ausentes\n",
        "atributos_relevantes.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "saGZyJd9zzZx",
        "outputId": "62658bfd-b8e7-4905-f039-4766d88a9975"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "marca    0\n",
              "venda    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resumo estatístico dos atributos numéricos\n",
        "print(\"\\nResumo estatístico dos atributos numéricos:\")\n",
        "print(atributos_relevantes.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5JQ3wa5i4eU-",
        "outputId": "f37f3966-9e0c-4258-93f4-d728b7847e60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Resumo estatístico dos atributos numéricos:\n",
            "         marca venda\n",
            "count     7906  7906\n",
            "unique      31     2\n",
            "top     Maruti     N\n",
            "freq      2367  5906\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "O resumo estatístico dos atributos categóricos marca e venda indica que o dataset possui 31 marcas distintas de veículos e duas possibilidades de valores para o atributo venda, que são \"N\" (indicando que o veículo não foi vendido) e \"Y\" (indicando que o veículo foi vendido). Além disso, a marca mais frequente nos dados é a \"Maruti\", presente em 2367 registros, e a maioria dos veículos no dataset não foi vendida, como indicado pela frequência de \"N\" para o atributo venda.\n"
      ],
      "metadata": {
        "id": "qfL6tj_H_-JQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Calculando a proporção de carros vendidos e não vendidos\n",
        "proporcao_vendas = atributos_relevantes['venda'].value_counts(normalize=True)\n",
        "print(proporcao_vendas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MmIX7CcX8qF6",
        "outputId": "5051a1c8-339d-47bb-b873-ab54ce8dfa62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "N    0.747028\n",
            "Y    0.252972\n",
            "Name: venda, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Criando um gráfico de pizza\n",
        "plt.pie(proporcao_vendas, labels=proporcao_vendas.index, autopct='%1.1f%%', startangle=90)\n",
        "plt.axis('equal')\n",
        "plt.title('Proporção de carros vendidos e não vendidos')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "8tY5ITUh9Oyf",
        "outputId": "acfa0d0b-04f3-4a52-ad40-f8db6d9a2e52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resumo de apenas dos veiculos vendidos 'y'\n",
        "veiculos_vendidos = atributos_relevantes.loc[atributos_relevantes['venda'] == 'Y']\n",
        "print(veiculos_vendidos)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N5a1M2wNAMGK",
        "outputId": "0d56fd83-c1ae-4626-f157-606a317d382d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           marca venda\n",
            "0         Maruti     Y\n",
            "1          Skoda     Y\n",
            "2          Honda     Y\n",
            "3        Hyundai     Y\n",
            "4         Maruti     Y\n",
            "...          ...   ...\n",
            "1995    Mahindra     Y\n",
            "1996   Chevrolet     Y\n",
            "1997      Maruti     Y\n",
            "1998        Tata     Y\n",
            "1999  Volkswagen     Y\n",
            "\n",
            "[2000 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibir a soma de quantidade por marca vendida\n",
        "quantidade_por_marca1 = veiculos_vendidos.groupby('marca').count()['venda'].sort_values(ascending=False)\n",
        "print(quantidade_por_marca1) # Em razão de haver uma grande variedade de marcas uma tabela nos fornece um visual relevante "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "foMdltWSHH4M",
        "outputId": "4ffe8f0c-06cb-4591-8d9a-cda46d49ceb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "marca\n",
            "Maruti        597\n",
            "Hyundai       332\n",
            "Mahindra      201\n",
            "Tata          178\n",
            "Toyota        126\n",
            "Honda         124\n",
            "Ford           92\n",
            "Chevrolet      56\n",
            "Renault        56\n",
            "Volkswagen     39\n",
            "Nissan         33\n",
            "BMW            29\n",
            "Jaguar         21\n",
            "Skoda          20\n",
            "Volvo          19\n",
            "Datsun         16\n",
            "Mercedes       16\n",
            "Lexus          11\n",
            "Audi            9\n",
            "Jeep            9\n",
            "Fiat            6\n",
            "Mitsubishi      3\n",
            "MG              2\n",
            "Kia             2\n",
            "Force           1\n",
            "Daewoo          1\n",
            "Land            1\n",
            "Name: venda, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Contagem de marcas vendidas\n",
        "count = veiculos_vendidos['marca'][veiculos_vendidos['venda'] == 'Y'].value_counts()\n",
        "\n",
        "# Plotando o gráfico de barras verticais\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.bar(count.index, count.values)\n",
        "plt.title('Quantidade de veículos vendidos por marca')\n",
        "plt.xlabel('Marca')\n",
        "plt.ylabel('Quantidade vendida')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 633
        },
        "id": "eKbbU35x-Isl",
        "outputId": "f07be1eb-92fb-4dc9-e0b5-6ba0ebff9653"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resumo de apenas dos veiculos vendidos 'y'\n",
        "veiculos_n_vendidos = atributos_relevantes.loc[atributos_relevantes['venda'] == 'N']\n",
        "print(veiculos_n_vendidos)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DIHB5-jJDjZA",
        "outputId": "9ca24967-2f87-4167-a13b-b3d1ced8cb78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         marca venda\n",
            "2000   Hyundai     N\n",
            "2001       BMW     N\n",
            "2002    Maruti     N\n",
            "2003  Mahindra     N\n",
            "2004       BMW     N\n",
            "...        ...   ...\n",
            "7901   Hyundai     N\n",
            "7902   Hyundai     N\n",
            "7903    Maruti     N\n",
            "7904      Tata     N\n",
            "7905      Tata     N\n",
            "\n",
            "[5906 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibir a soma de quantidade por marca não vendida\n",
        "quantidade_por_marca2 = veiculos_n_vendidos.groupby('marca').count()['venda'].sort_values(ascending=False)\n",
        "print(quantidade_por_marca2) # Em razão de haver uma grande variedade de marcas uma tabela nos fornece um visual relevante"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N_brTXF-D9QF",
        "outputId": "e107e8d7-1fdb-47f5-876c-65dd54ca9240"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "marca\n",
            "Maruti        1770\n",
            "Hyundai       1028\n",
            "Mahindra       557\n",
            "Tata           541\n",
            "Honda          342\n",
            "Toyota         326\n",
            "Ford           296\n",
            "Chevrolet      174\n",
            "Renault        172\n",
            "Volkswagen     146\n",
            "BMW             89\n",
            "Skoda           84\n",
            "Jaguar          50\n",
            "Datsun          49\n",
            "Nissan          48\n",
            "Volvo           48\n",
            "Mercedes        38\n",
            "Fiat            35\n",
            "Audi            31\n",
            "Lexus           23\n",
            "Jeep            22\n",
            "Mitsubishi      11\n",
            "Land             5\n",
            "Force            5\n",
            "Isuzu            5\n",
            "Ambassador       4\n",
            "Daewoo           2\n",
            "Kia              2\n",
            "Opel             1\n",
            "MG               1\n",
            "Ashok            1\n",
            "Name: venda, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Contagem de marcas não vendidas\n",
        "count = veiculos_n_vendidos['marca'][veiculos_n_vendidos['venda'] == 'N'].value_counts()\n",
        "\n",
        "# Plotando o gráfico de barras verticais\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.bar(count.index, count.values)\n",
        "plt.title('Quantidade de veículos não vendidos por marca')\n",
        "plt.xlabel('Marca')\n",
        "plt.ylabel('Quantidade não vendida')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 637
        },
        "id": "St2lNYe8FRDa",
        "outputId": "d9450dee-a4cb-4aef-b5c2-7f8bf8b9b51c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}